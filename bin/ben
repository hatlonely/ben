#!/usr/bin/env python3


import argparse
import sys
from ben.framework import Framework


def str2bool(v):
    if isinstance(v, bool):
        return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


def main():
    parser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.RawTextHelpFormatter(prog, width=200), description="""example:
  ben -t ops/example
""")
    parser.add_argument("-r", "--reporter", default="text", help="test report format. Built in support of `html/json/text`. Support user defined extension in `x`")
    parser.add_argument("-t", "--test", help="test root directory")
    parser.add_argument("-p", "--plan", help="test plan directory")
    parser.add_argument("--json-result", help="json result report. If you specify this field, you can convert the JSON report to another format report")
    parser.add_argument("--hook", help="runtime hook. Separated by comma. Built in support of `debug/report/slsLog/stdLog/email/dingTalk`. Support user defined extension in `x`")
    parser.add_argument("--lang", help="report language. Built in support of `zh|en`")
    parser.add_argument("-x", "--x", help="user defined extension directory. Support to expand drivers/reporters/hooks/util-functions")
    parser.add_argument("--customize", help="customize filename")

    args = parser.parse_args()

    fw = Framework(
        test_directory=args.test,
        plan_directory=args.plan,
        reporter=args.reporter,
        hook=args.hook,
        lang=args.lang,
        x=args.x,
        customize=args.customize,
    )

    if args.json_result:
        fw.format()
    elif not fw.run():
        sys.exit(1)


if __name__ == "__main__":
    main()
